Countdown Version History

================================================================================
Commenced 	- 24/02/2014
Ended		- 
--------------------------------------------------------------------------------
 
	v0.0 - 24/02/2014 - File birth

		Created initial files as well as a "read me" file and a github repo.
		^ Tom

	v0.0.1 - 4/03/2014 - Outline of classes

		Created initial classes and began creating empty methods to be filled in
		as we go along. Created a rough implementation of the input and launcher
		classes to get the classes talking to each other.
		^ Thomas
		
	v0.0.2 - 4/3/2014 - Started work on the dictionary
	
		This involved reading and storing of the dictionary in memory.
		- Collecting all nine letter words together to make creating an 
		anagram easier.
		- Checking of strings past in to see if the exist in the provided
		dictionary.
		- Creating anagrams. This was done by breaking a nine letter long word
		into a collection and then using Collections.Shuffle to mix it up. Then
		a string builder was used to create a string that can be returned.
		- Creating getWords to return all possible solutions to the anagram.
		This checks against the nine letter words rather then the whole
		dictionary so the input must be nine letters long.
		- Spent some time thinking about how I will find and return the best
		answers to a mix of letters.
		- A boolean value exists to switch between testing an not. This
		changes which dictionary is loaded into the program.
		^ Tom

		Started working on javaDoc. Setting it up and such.
		^ Tom

	v0.0.2 - 10/03/2014 - Dictionary Creation

		^ Tom

	v0.0.3 - 10/03/2014 - Basic Conundrum

		Added functionality to the conundrum class. Fetches an anagram and it's
		solution from the dictionary then shows the players. It then pauses
		while the players come up with a solution. Once the thirty seconds have
		passed, it prompts the players to enter their answers which it then
		compares against the real answer. For now it awards 10 points to the
		winning player, 5 points each for a draw and no points for a win.

		Changed the return type of getAnagram() in the Dictionary class from
		String to String[] to allow it to return both the anagram and it's
		solution.

		Created a basic implementation of creating players at the start of the
		game within the Launcher constructor. This is rather messy bus will be
		enough for demonstrating the functionality of different parts of the
		program for now.

		The next step will be to add functionality to allow the players to
		'buzz' in during the countdown as it is in the real game.
		^ Thomas

	v0.1 - xx/xx/2014 - Complete Conundrum

	v0.1.1 - 15/03/2014 - Finishing dictionary

		Worked on finding a way to do find all the best matches. Thought through
		a couple of idea's but non of them where overly attractive. Finally
		settled on using a tree.
		
		The tree has a max depth of nine - for each letter possible
		With each node having at max 26 children - for each letter of the 
		alphabet.

		Each node contains a letter value and an ArrayList of all possible words
		at this location.

		When adding a word to the tree. The word is broken into an array it is
		then sorted into order using Arrays.sort. Then using this order the word
		can be added to the tree. For example: if given "cat" this would be 
		sorted to "act". A would be taken first and starting from the root the
		child node 'a' would be selected or created if it does not already
		exist. Then for 'c' the node with the value 'c' would be selected or 
		created. and so on till you have run through the array. This means you
		end up with a node corresponding to the word.

		When finding the best possible word the above process is very much 
		repeated. The anagram is broken into and array, sorted and then used to
		navigate through the tree. When you arrive at the final node the
		ArrayList of matching words is returned.

		The addition of this means that getWords is now an unattractive way of 
		finding the solution to an anagram and has been depreciated.
		^ Tom

	v0.2 - xx/xx/2014 - Complete Word

	v0.3 - xx/xx/2014 - Complete Number

	v0.4 - xx/xx/2014 - Complete Full Game

	v0.5 - xx/xx/2014 - Scoreboard

	v0.6 - xx/xx/2014 - Saving and loading

	v1.0 - xx/xx/2014 - Countdown complete